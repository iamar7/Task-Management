(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: None"
p3
sS'layer'
p4
S'/home/anam786/itws/project/web2py/applications/Task1/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.13.3 or newer")\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\n## app configuration made easy. Look inside private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\n## once in production, remove reload=True to gain full speed\nmyconf = AppConfig(reload=True)\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.get(\'db.uri\'), \n             pool_size = myconf.get(\'db.pool_size\'),\n             migrate_enabled = myconf.get(\'db.migrate\'),\n             check_reserved = [\'all\'])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## choose a style for forms\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n## (optional) static assets folder versioning\n# response.static_version = \'0.0.0\'\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\ndb = DAL("sqlite://storage.sqlite")\nfrom gluon.tools import Auth, Service, PluginManager,Crud\n\n# host names must be a list of allowed host names (glob syntax allowed)\nauth = Auth(db)\ncrud = Crud(db)\nservice = Service()\nplugins = PluginManager()\n\ndb.define_table(auth.settings.table_user_name,\n                Field(\'first_name\', length=128, default=\'\'),\n                Field(\'last_name\', length=128, default=\'\'),\n                Field(\'username\', length=128, default=\'\',unique=True),\n                Field(\'email\', length=128, default=\'\', unique=True),\n                Field(\'password\', \'password\', length=512,readable=False, label=\'Password\'),\n                Field(\'registration_key\', length=512,writable=False, readable=False, default=\'\'),\n                Field(\'reset_password_key\', length=512,writable=False, readable=False, default=\'\'),\n                Field(\'registration_id\', length=512,writable=False, readable=False, default=\'\'))\n\ncustom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table\ncustom_auth_table.first_name.requires = \\\nIS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.last_name.requires = \\\nIS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.username.requires = \\\nIS_NOT_EMPTY(error_message=auth.messages.is_empty)\ncustom_auth_table.password.requires = [IS_STRONG(min=8,upper=1,lower=1,special=1), CRYPT()]\ncustom_auth_table.username.requires = [IS_NOT_EMPTY(),IS_NOT_IN_DB(db,custom_auth_table.username)]\ncustom_auth_table.email.requires = [IS_EMAIL(error_message=auth.messages.invalid_email),IS_NOT_IN_DB(db, custom_auth_table.email)]\nauth.settings.table_user = custom_auth_table # tell auth to use custom_auth_table\n\n\n\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=True, signature=False)\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'smtp.gmail.com:587\'\nmail.settings.sender = \'md.raihan1710@gmail.com\'\nmail.settings.login = \'md.raihan1710:88d7fc621\'\n\n\n## configure auth policy\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\ndb = DAL(\'sqlite://db.db\')\nSTATUSSES=(\'assigned\',\'completed\',\'pending\')\nNUMB=(0,10,20,30,40,50,60,70,80,90,100)\ndb.define_table(\'upload\',\n                Field(\'Task\',\'text\',requires=IS_NOT_EMPTY() and IS_NOT_IN_DB(db,\'upload.Task\')),\n                Field(\'Username\',\'text\', readable=False, writable=False, requires = IS_NOT_EMPTY()),\n                Field(\'Date_of_Upload\', readable=False, writable=False, requires = IS_NOT_EMPTY()),\n                Field(\'Description\',\'text\'),\n                Field(\'Deadline\',\'datetime\',requires=IS_NOT_EMPTY()),\n                Field(\'Access\',\'list:string\',requires=IS_IN_SET((\'public\',\'private\'))), \n                Field(\'status\',requires=IS_IN_SET(STATUSSES),default=STATUSSES[0]),\n                Field(\'complete_percent\',\'integer\',requires=IS_IN_SET(NUMB),default=NUMB[0]),\n                ##Field(\'email\',\'text\',requires=IS_EMAIL()),\n                ##Field(\'head\',default=auth.user_id),##error is due to this line in task====requires=IS_IN_DB(db,upload.Username)\n                ##Field(\'head\',db.auth_user),\n                Field(\'SubTasks\',\'boolean\'),\n                Field(\'SubTask1\',\'text\'),\n                Field(\'SubTask2\',\'text\'),\n                Field(\'SubTask3\',\'text\'),\n                Field(\'SubTask4\',\'text\'),\n                Field(\'SubTask5\',\'text\'),\n                )\n##db.upload.id.readable = False\ndb.define_table(\'post\',\n    Field(\'upload\', readable=False, writable=False),\n    Field(\'body\', \'text\'),\n    Field(\'created_on\', readable=False, writable=False),\n    Field(\'created_by\', readable=False, writable=False)\n               )\ndb.define_table(\'addpers\',\n                Field(\'refs\',\'integer\'),\n                Field(\'nmes\',\'string\',required=True,label="Name"),\n                auth.signature()\n                )\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/anam786/itws/project/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/anam786/itws/project/web2py/applications/Task1/models/db.py", line 158, in <module>\n    auth.signature()\n  File "/home/anam786/itws/project/web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/anam786/itws/project/web2py/gluon/packages/dal/pydal/base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/anam786/itws/project/web2py/gluon/packages/dal/pydal/objects.py", line 299, in __init__\n    field\nSyntaxError: define_table argument is not a Field or Table: None\n'
p11
s.